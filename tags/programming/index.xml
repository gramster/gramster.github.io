<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Graham Wheeler's Random Forest</title><link>https://www.grahamwheeler.com/tags/programming/</link><description>Recent content in Programming on Graham Wheeler's Random Forest</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Jun 2021 16:19:57 +0000</lastBuildDate><atom:link href="https://www.grahamwheeler.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Tests that Don't Suck</title><link>https://www.grahamwheeler.com/post/unit-tests-that-dont-suck/</link><pubDate>Sat, 26 Jun 2021 16:19:57 +0000</pubDate><guid>https://www.grahamwheeler.com/post/unit-tests-that-dont-suck/</guid><description>Introduction This post is based on a talk I gave to my team in an effort to establish a common approach to thinking about unit tests. The existing code base we had suffered from a number of problems relating to how tests were being written; despite good intentions, it can be easy to do testing badly. In particular, here are some of the things I observed:
a massive overuse of dependency injection: pretty much all dependencies of all classes were being set up using DI.</description></item><item><title>A Python Crash Course</title><link>https://www.grahamwheeler.com/post/python-crash-course/</link><pubDate>Thu, 12 Apr 2018 20:10:00 +0000</pubDate><guid>https://www.grahamwheeler.com/post/python-crash-course/</guid><description>I&amp;rsquo;ve been teaching a crash course in data science with Python, which starts off with learning Python itself. The target audience is Java programmers (generally senior level) so its assumed that things like classes and methods are well understood. The focus is mostly on what is different with Python. I teach it using Jupyter notebooks but the content is useful as a blog post too so here we go.
The other parts are:</description></item></channel></rss>