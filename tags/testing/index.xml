<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Graham Wheeler's Random Forest</title><link>https://www.grahamwheeler.com/tags/testing/</link><description>Recent content in Testing on Graham Wheeler's Random Forest</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Jun 2021 16:19:57 +0000</lastBuildDate><atom:link href="https://www.grahamwheeler.com/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Unit Tests that Don't Suck</title><link>https://www.grahamwheeler.com/post/unit-tests-that-dont-suck/</link><pubDate>Sat, 26 Jun 2021 16:19:57 +0000</pubDate><guid>https://www.grahamwheeler.com/post/unit-tests-that-dont-suck/</guid><description>Introduction This post is based on a talk I gave to my team in an effort to establish a common approach to thinking about unit tests. The existing code base we had suffered from a number of problems relating to how tests were being written; despite good intentions, it can be easy to do testing badly. In particular, here are some of the things I observed:
a massive overuse of dependency injection: pretty much all dependencies of all classes were being set up using DI.</description></item></channel></rss>